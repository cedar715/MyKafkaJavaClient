Create StorageClass with WaitForFirstConsumer Binding Mode
First, a StorageClass should be created that sets volumeBindingMode: WaitForFirstConsumer to enable volume topology-aware scheduling.
This mode instructs Kubernetes to wait to bind a PVC until a Pod using it is scheduled.

cat << EOF | kubectl apply -f -
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
EOF
---
kubectl patch storageclass/local-storage \
  --namespace "default" \
  --patch '{"allowVolumeExpansion": true}'
---
Prepare volume on the host
# Execute these commands on the worker node where the POD will be located

# on master
mkdir -p /vagrant/data/volumes/mpv1
chmod 777 /vagrant/data/volumes/mpv1
mkdir -p /vagrant/data/volumes/mpv2
chmod 777 /vagrant/data/volumes/mpv2
mkdir -p /vagrant/data/volumes/mpv3
chmod 777 /vagrant/data/volumes/mpv3

# on worker 1
mkdir -p /vagrant/data/volumes/w1pv1
chmod 777 /vagrant/data/volumes/w1pv1
mkdir -p /vagrant/data/volumes/w1pv2
chmod 777 /vagrant/data/volumes/w1pv2
mkdir -p /vagrant/data/volumes/w1pv3
chmod 777 /vagrant/data/volumes/w1pv3

# on worker 2
mkdir -p /vagrant/data/volumes/w2pv1
chmod 777 /vagrant/data/volumes/w2pv1
mkdir -p /vagrant/data/volumes/w2pv2
chmod 777 /vagrant/data/volumes/w2pv2
mkdir -p /vagrant/data/volumes/w2pv3
chmod 777 /vagrant/data/volumes/w2pv3
## For control center
mkdir -p /vagrant/data/volumes/w2pv4
chmod 777 /vagrant/data/volumes/w2pv4

#Create PersistentVolume with a reference to local-storage StorageClass: 01-pvs.yaml

CLeanup:
rm -rf /vagrant/data/volumes/mpv1
rm -rf /vagrant/data/volumes/mpv2
rm -rf /vagrant/data/volumes/mpv3
rm -rf /vagrant/data/volumes/w1pv1
rm -rf /vagrant/data/volumes/w1pv2
rm -rf /vagrant/data/volumes/w1pv3
rm -rf /vagrant/data/volumes/w2pv1
rm -rf /vagrant/data/volumes/w2pv2
rm -rf /vagrant/data/volumes/w2pv3
rm -rf /vagrant/data/volumes/w2pv4
rm -rf /vagrant/data/volumes/w2pv4